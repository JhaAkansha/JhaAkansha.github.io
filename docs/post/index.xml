<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Akansha Jha</title>
        <link>https://jhaakansha.github.io/post/</link>
        <description>Recent content in Posts on Akansha Jha</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 24 Aug 2022 13:15:46 +0530</lastBuildDate><atom:link href="https://jhaakansha.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Data Bending</title>
        <link>https://jhaakansha.github.io/p/data-bending/</link>
        <pubDate>Wed, 24 Aug 2022 13:15:46 +0530</pubDate>
        
        <guid>https://jhaakansha.github.io/p/data-bending/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.s7_sp2tGLHalcnpZTPELMAHaE8%26pid%3DApi&amp;amp;f=1&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;
&lt;img src=&#34;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse3.mm.bing.net%2Fth%3Fid%3DOIP.3mHON0qJAwp8j86TP7_VDgHaFj%26pid%3DApi&amp;amp;f=1&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;
&lt;br&gt;
&lt;br&gt;
Databending is the artistic misuse of digital information. It draws its name from the practice of circuit bending &amp;ndash; a practice where childrens&amp;rsquo; toys, cheap keyboards and effects pedals are deliberately short-circuited by bending the circuit board to generate spontaneous and unpredictable sounds. Databending takes a similar approach to circuit bending, using software to intentionally disrupt the information contained within a file. There&amp;rsquo;s all kinds of different techniques, some involving deep hex editing of certain parts of a compression algorithm, but other methods are surprisingly simple. A hex editor (or binary file editor or byte editor) is a computer program that allows for manipulation of the fundamental binary data that constitutes a computer file.
As technology becomes more complex, more glitches occur. A new term, &amp;ldquo;glitch art&amp;rdquo; has been coined for these glitches. An increasing number of artists have started to value these glitches and have come to insert them intentionally in whatever they are trying to create though many argue that the term glitch art can only be used for glitches that are unintentional.
The different techniques of databending can broadly be divided into three categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Incorrect editing: In incorrect editing, a file is edited using software intended for a different type of data.&lt;/li&gt;
&lt;li&gt;Reinterpretation: Reinterpretation is where a file is converted from one medium to another.&lt;/li&gt;
&lt;li&gt;Field of forced errors: In this type of databending known bugs in programs are exploited to force them to fail, usually while writing a file in the hope that the written file will be corrupted.&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Big O</title>
        <link>https://jhaakansha.github.io/p/big-o/</link>
        <pubDate>Thu, 14 Jul 2022 12:09:29 +0530</pubDate>
        
        <guid>https://jhaakansha.github.io/p/big-o/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*MojRMNBNOHLqwe5ak7hTug.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;
&lt;br&gt;
&lt;br&gt;
Big O is the used to decribe the efficiency of algorithms. Academics use big O, big θ and big Ω to decribe runtimes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Big O : Big O describes the upper bound on time. An algorithm that requires O(n) time can also be described as requiring O(n²), O(n³), O(2ⁿ) etc. The algorithm is at least as fast as any of these. Therefore, they are upper bounds on the runtime. For example, if x&amp;lt;13, it is also true that x&amp;lt;100, x&amp;lt;1000 etc.&lt;/li&gt;
&lt;li&gt;Big Ω :  Big Ω is a similar concept but for lower bound. If the runtime is decribed as Ω(n), then it can also be described by Ω(log n) and Ω(1). But, it won&amp;rsquo;t be faster than those runtimes.&lt;/li&gt;
&lt;li&gt;Big θ : θ means both O and Ω. That is, an algorithm is θ(n) if its both O(n) and Ω(n). θ gives a tight bound on runtimes.
&lt;br&gt;
In industry, the meaning of O and θ seem to have been merged. Industry&amp;rsquo;s meaning of big O is closer to what academics mean by θ. The runtime for an algorithm is described in three different ways:&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Best Case :&lt;/strong&gt; If we consider the case of sorting an array, then if all the elements are equal, then quick sort will traverse the array only once giving the runtime O(n). This is the least runtime possible, hence it is the best case scenario.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Worst Case :&lt;/strong&gt; If we get really unlucky and the pivot is repeatedly the biggest element in the array then we have the largest possible runtime. This is the worst case scenario.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expected Case :&lt;/strong&gt; Usually, the conditions considered above don&amp;rsquo;t happen. In general cases, the expected runtime for quick sort will be O(n log n).&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
